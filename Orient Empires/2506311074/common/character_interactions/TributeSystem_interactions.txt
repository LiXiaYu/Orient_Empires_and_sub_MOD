############# TributeSystem_interactions
# by 往来天地间 WangLaiTianDiJian
# TributeSystem

#WLTDJ20211219


#不让AI进行解除朝贡、贿赂成为附属国这类操作，一来增加运算量，二来这些操作都有可能对AI造成不利影响，削弱AI（例如要花钱、要承受撕破脸带来的好感度惩罚等）



TributeSystem_offer_allegiance_interaction = {#请求成为朝贡国
	category = interaction_category_diplomacy
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_offer_allegiance_desc
	
	greeting = positive
	notification_text = TributeSystem_offer_allegiance_notification
	
	is_shown = {
		scope:recipient = {
			TributeSystem_can_ask_to_be_suzerain_of_trigger = { TRIBUTARY = actor }
		}
		scope:actor = {
			TributeSystem_can_ask_to_be_tributary_of_trigger = { SUZERAIN = recipient }
			TributeSystem_can_offer_allegiance_trigger = yes
		}
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:actor = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:recipient = { is_diplomatically_available = yes }

		custom_description = {
			text = "TributeSystem_allegiance_offer_has_been_rejected"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_opinion_modifier = {
						modifier = TributeSystem_allegiance_offer_refused_opinion
						target = scope:recipient
					}
				}
			}
		}
		
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = TributeSystem_offer_allegiance
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1001
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook	
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1002
			TributeSystem_create_tribute_relation_effect = {
				TRIBUTARY = actor
				SUZERAIN = recipient
			}
			stress_impact = {
				shy = minor_stress_impact_gain
			}

			if = {
				limit = { scope:hook = yes }
				use_hook = scope:recipient
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = TributeSystem.1003
		}
		scope:actor = {
			add_opinion = {
				modifier = TributeSystem_allegiance_offer_refused_opinion
				target = scope:recipient
			}
		}
	}

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}
	
	ai_accept = { # Similar to Negotiate Alliance, but without modifiers for Liege, being an heir, etc.
		base = -50
		modifier = {
			scope:actor = {
				is_ai = yes
				primary_title.tier >= tier_duchy
#				has_government = tribal_government
#				NOT = { any_neighboring_top_liege_realm_owner = { is_ai = no } }
			}
			scope:recipient = {
				is_ai = yes
			}
			add = 100
		}
		modifier = {
			scope:actor = {
				is_ai = yes
				primary_title.tier >= tier_kingdom
#				has_government = tribal_government
#				NOT = { any_neighboring_top_liege_realm_owner = { is_ai = no } }
			}
			scope:recipient = {
				is_ai = yes
			}
			add = 100
		}
#以下照抄原版生活方式解锁的同盟谈判，同盟谈判基础接受度为-25
##########照抄原版开始
		# Tier Differences
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value >= 1
				}
			}
			add = {
				value = 30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 2
						}
					}
					add = 30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 3
						}
					}
					add = 60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 4
						}
					}
					add = 90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 5
						}
					}
					add = 120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value <= -1
				}
			}
			add = {
				value = -30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -2
						}
					}
					add = -30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -3
						}
					}
					add = -60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -4
						}
					}
					add = -90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -5
						}
					}
					add = -120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		opinion_modifier = { # More likely to accept if Recipient likes the Actor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}
		# Dynasty Prestige Levels
		modifier = {
			add = -5
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level = 0 }
		}
		modifier = {
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level >= 2 }
			add = {
				value = 10
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 3 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 4 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 5 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 6 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 7 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 8 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 9 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 10 }
					}
					add = 5
				}
			}
		}
		modifier = { #Faith compatibility
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value > faith_fully_accepted_level
				}
			}
			add = {
				value = -20
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_astray_level
							}
						}
					}
					subtract = 20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					subtract = 40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					subtract = 60
				}
			}
			desc = MARRY_DIFFERENT_FAITH_REASON
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
					}
				multiply = 10
	  		}
			desc = offer_vassalization_interaction_aibehavior_power_tt
		}
		# Recipient is a Claimant to Actor's titles.
		modifier = {
			scope:recipient = {
				any_claim = {
					holder = scope:actor
				}
			}
			add = {
				value = -200
				if = {
					limit = {
						NOT = {
							scope:recipient.house = scope:actor.house
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						NOT = {
							scope:recipient.dynasty = scope:actor.dynasty
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						scope:recipient.dynasty = scope:actor.dynasty
						OR = {
							has_trait = bastard
							has_trait = legitimized_bastard
						}
					}
					multiply = 1.5
				}
				if = { # Primary heir will probably inherit the lands after the rulers death
					limit = {
						scope:recipient = { is_primary_heir_of = scope:actor }
					}
					divide = 4
				}
			}
			desc = IS_CLAIMANT_TO_ACTORS_TITLES
		}
		#Actor has claims on recipient's titles.
		modifier = {
			scope:actor = {
				any_claim = {
					holder = scope:recipient
				}
			}
			add = 25
			desc = IS_CLAIMANT_TO_RECIPIENT_TITLES
		}
		modifier = {
			scope:recipient = {
				NOT = {
					any_claim = {
						holder = scope:actor
					}
				}
			}
			scope:recipient.house = scope:actor.house
			add = 15
			desc = IS_SAME_HOUSE_REASON
		}
		modifier = {
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = declared_war
				}
			}
			add = -100
			desc = DECLARED_WAR_REASON
		}
	}
##########照抄原版结束
	ai_potential = {
#		always = no
		is_at_war = no
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		max = 10
	}
	
	ai_frequency = 72
	
	ai_will_do = {
		base = 0
		
		modifier = {
	  	  	add = {
				value = scope:recipient.max_military_strength
				divide = { value = scope:actor.max_military_strength min = 1 }
				subtract = 1.5
				multiply = 50
	  		}
		}
		modifier = {
			scope:actor = {
				primary_title.tier = tier_duchy
#				has_government = tribal_government
				NOT = { any_neighboring_top_liege_realm_owner = { is_ai = no } }
			}
			add = 50
		}
		modifier = {
			scope:actor = {
				primary_title.tier = tier_kingdom
#				has_government = tribal_government
				NOT = { any_neighboring_top_liege_realm_owner = { is_ai = no } }
			}
			add = 50
		}
	}
	
}


TributeSystem_demand_allegiance_interaction = {#要求成为朝贡国
	category = interaction_category_diplomacy
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_demand_allegiance_desc
	
	greeting = positive
	notification_text = TributeSystem_demand_allegiance_notification
	
	is_shown = {
		scope:actor = {
			TributeSystem_can_ask_to_be_suzerain_of_trigger = { TRIBUTARY = recipient }
			TributeSystem_can_demand_allegiance_trigger = yes
		}
		scope:recipient = {
			TributeSystem_can_ask_to_be_tributary_of_trigger = { SUZERAIN = actor }
		}
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:actor = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:recipient = { is_diplomatically_available = yes }

		custom_description = {
			text = "TributeSystem_allegiance_demand_has_been_rejected"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_opinion_modifier = {
						modifier = TributeSystem_allegiance_demand_refused_opinion
						target = scope:recipient
					}
				}
			}
		}
		
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = TributeSystem_demand_allegiance
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1004
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook	
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1005
			TributeSystem_create_tribute_relation_effect = {
				TRIBUTARY = recipient
				SUZERAIN = actor
			}
			stress_impact = {
				shy = minor_stress_impact_gain
			}

			if = {
				limit = { scope:hook = yes }
				use_hook = scope:recipient
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = TributeSystem.1006
		}
		scope:actor = {
			add_opinion = {
				modifier = TributeSystem_allegiance_demand_refused_opinion
				target = scope:recipient
			}
		}
	}

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}
	
	ai_accept = { # Similar to Negotiate Alliance, but without modifiers for Liege, being an heir, etc.
		base = -50
		modifier = {
			scope:actor = {
				is_ai = yes
				primary_title.tier >= tier_kingdom
			}
			scope:recipient = {
				is_ai = yes
			}
			add = 300
		}
#以下照抄原版生活方式解锁的同盟谈判，同盟谈判基础接受度为-25
##########照抄原版开始
		# Tier Differences
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value >= 1
				}
			}
			add = {
				value = 30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 2
						}
					}
					add = 30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 3
						}
					}
					add = 60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 4
						}
					}
					add = 90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 5
						}
					}
					add = 120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value <= -1
				}
			}
			add = {
				value = -30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -2
						}
					}
					add = -30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -3
						}
					}
					add = -60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -4
						}
					}
					add = -90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -5
						}
					}
					add = -120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		opinion_modifier = { # More likely to accept if Recipient likes the Actor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}
		# Dynasty Prestige Levels
		modifier = {
			add = -5
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level = 0 }
		}
		modifier = {
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = { has_dynasty = yes }
			NOT = { scope:actor.dynasty = scope:recipient.dynasty }
			scope:actor.dynasty = { dynasty_prestige_level >= 2 }
			add = {
				value = 10
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 3 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 4 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 5 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 6 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 7 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 8 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 9 }
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = { dynasty_prestige_level >= 10 }
					}
					add = 5
				}
			}
		}
		modifier = { #Faith compatibility
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value > faith_fully_accepted_level
				}
			}
			add = {
				value = -20
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_astray_level
							}
						}
					}
					subtract = 20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					subtract = 40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					subtract = 60
				}
			}
			desc = MARRY_DIFFERENT_FAITH_REASON
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
	  	  	add = {
				value = 1
					subtract = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
					}
				multiply = 10
	  		}
			desc = offer_vassalization_interaction_aibehavior_power_tt
		}
		# Recipient is a Claimant to Actor's titles.
		modifier = {
			scope:recipient = {
				any_claim = {
					holder = scope:actor
				}
			}
			add = {
				value = -200
				if = {
					limit = {
						NOT = {
							scope:recipient.house = scope:actor.house
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						NOT = {
							scope:recipient.dynasty = scope:actor.dynasty
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						scope:recipient.dynasty = scope:actor.dynasty
						OR = {
							has_trait = bastard
							has_trait = legitimized_bastard
						}
					}
					multiply = 1.5
				}
				if = { # Primary heir will probably inherit the lands after the rulers death
					limit = {
						scope:recipient = { is_primary_heir_of = scope:actor }
					}
					divide = 4
				}
			}
			desc = IS_CLAIMANT_TO_ACTORS_TITLES
		}
		#Actor has claims on recipient's titles.
		modifier = {
			scope:actor = {
				any_claim = {
					holder = scope:recipient
				}
			}
			add = 25
			desc = IS_CLAIMANT_TO_RECIPIENT_TITLES
		}
		modifier = {
			scope:recipient = {
				NOT = {
					any_claim = {
						holder = scope:actor
					}
				}
			}
			scope:recipient.house = scope:actor.house
			add = 15
			desc = IS_SAME_HOUSE_REASON
		}
		modifier = {
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = declared_war
				}
			}
			add = -100
			desc = DECLARED_WAR_REASON
		}
	}
##########照抄原版结束
	ai_potential = {
#		always = no
		is_at_war = no
	}
	
	ai_targets = {
		ai_recipients = neighboring_rulers
		max = 30
	}
	
	ai_frequency = 72
	
	ai_will_do = {
		base = 0
		
		modifier = {
	  	  	add = {
				value = scope:recipient.max_military_strength
				divide = { value = scope:actor.max_military_strength min = 1 }
				subtract = 1.5
				multiply = 50
	  		}
		}
		modifier = {
			scope:actor = {
				primary_title.tier = tier_kingdom
			}
			add = 20
		}
		modifier = {
			scope:actor = {
				primary_title.tier = tier_empire
			}
			add = 30
		}
		modifier = {
			scope:actor = {
				has_realm_law = crown_authority_1
			}
			add = 5
		}
		modifier = {
			scope:actor = {
				has_realm_law = crown_authority_2
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				has_realm_law = crown_authority_3
			}
			add = 20
		}
		modifier = {
			scope:actor = {
				prestige_level > 3
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				dynasty.dynasty_prestige_level > 3
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				sub_realm_size > 40
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				diplomacy_lifestyle_perk_points > 10
			}
			add = 10
		}
		modifier = {
			scope:actor = {
				SpecialRelevantFactorImpactOnRuler_trigger_ruler_is_type_A_01_trigger = yes
			}
			add = 25
		}
	}
	
}


TributeSystem_demand_allegiance_with_wealth_offer_interaction = {#贿赂其成为朝贡国
	category = interaction_category_diplomacy
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_demand_allegiance_with_wealth_offer_desc
	
	greeting = positive
	notification_text = TributeSystem_demand_allegiance_with_wealth_offer_notification
	
	is_shown = {
		scope:actor = {
			TributeSystem_can_ask_to_be_suzerain_of_trigger = { TRIBUTARY = recipient }
			TributeSystem_can_demand_allegiance_trigger = yes
		}
		scope:recipient = {
			TributeSystem_can_ask_to_be_tributary_of_trigger = { SUZERAIN = actor }
		}
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:actor = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:recipient = { is_diplomatically_available = yes }

		custom_description = {
			text = "TributeSystem_allegiance_demand_has_been_rejected"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_opinion_modifier = {
						modifier = TributeSystem_allegiance_demand_refused_opinion
						target = scope:recipient
					}
				}
			}
		}
		
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = TributeSystem_demand_allegiance_with_wealth_offer
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1007
		}
	}

	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook	
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1008
			TributeSystem_create_tribute_relation_effect = {
				TRIBUTARY = recipient
				SUZERAIN = actor
			}
			TributeSystem_pay_income_function_effect = {
				ACTOR = actor
				TARGET = recipient
				THRESHOLD = 10
				MONTHS = 24
			}
			stress_impact = {
				shy = minor_stress_impact_gain
			}

			if = {
				limit = { scope:hook = yes }
				use_hook = scope:recipient
			}
		}
	}
	
	on_decline = {
		scope:actor = {
			trigger_event = TributeSystem.1009
		}
		scope:actor = {
			add_opinion = {
				modifier = TributeSystem_allegiance_demand_refused_opinion
				target = scope:recipient
			}
		}
	}

	auto_accept = yes

	ai_potential = {
		always = no
	}
	
	ai_will_do = {
		base = 0
	}
	
}

TributeSystem_suzerain_break_tribute_relation_interaction = {#宗主国抛弃朝贡国
	category = interaction_category_diplomacy
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_suzerain_break_tribute_relation_desc
	
	greeting = positive
	notification_text = TributeSystem_suzerain_break_tribute_relation_notification
	
	is_shown = {
		scope:actor = { has_relation_WLTDJ_tributary = scope:recipient }
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:actor = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:recipient = { is_diplomatically_available = yes }
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = TributeSystem_suzerain_break_tribute_relation
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1010
		}
	}

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1011
			TributeSystem_break_tribute_relation_effect = {
				TRIBUTARY = recipient
				SUZERAIN = actor
			}

			stress_impact = {
				shy = minor_stress_impact_gain
			}
		}
	}

	auto_accept = yes

	ai_potential = {
		always = no
	}
	
	ai_will_do = {
		base = 0
	}
	
}


TributeSystem_tributary_break_tribute_relation_interaction = {#朝贡国提出终止朝贡
	category = interaction_category_diplomacy
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	

	interface_priority = 60
	desc = TributeSystem_tributary_break_tribute_relation_desc
	
	greeting = positive
	notification_text = TributeSystem_tributary_break_tribute_relation_notification
	
	is_shown = {
		scope:actor = { has_relation_WLTDJ_suzerain = scope:recipient }
	}
	
	is_valid_showing_failures_only = {
		
		scope:recipient = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:actor = {
			is_landed = yes
			is_at_war = no
			is_imprisoned = no
		}
		
		scope:recipient = { is_diplomatically_available = yes }
	}
	
	can_send = {
		custom_description = { # Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = TributeSystem_tributary_break_tribute_relation
				}
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = TributeSystem.1013
		}
	}

	send_options_exclusive = no
		
	on_accept = {
		scope:actor = {
			trigger_event = TributeSystem.1014
			TributeSystem_break_tribute_relation_effect = {
				TRIBUTARY = actor
				SUZERAIN = recipient
			}

			stress_impact = {
				shy = minor_stress_impact_gain
			}
		}
	}

	auto_accept = yes

	ai_potential = {
		always = no
	}
	
	ai_will_do = {
		base = 0
	}
	
}

